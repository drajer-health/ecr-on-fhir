stages:
  - build
  - test

build:
  stage: build
  image: "registry.gitlab.com/gitlab-org/cluster-integration/auto-build-image:v0.4.0"
  variables:
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:20.10.9-dind
  script:
    - |
      echo "Setting up tags..."
      if [[ -z "$CI_COMMIT_TAG" ]]; then
        export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE}
        export CI_APPLICATION_TAG=$CI_COMMIT_SHORT_SHA
      else
        export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE}
        export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_TAG}
      fi

      image_previous="$CI_APPLICATION_REPOSITORY:${CI_COMMIT_BEFORE_SHA:0:8}"
      image_latest="$CI_APPLICATION_REPOSITORY:latest"

    - |
      echo "Setting up Docker..."
      if ! docker info &>/dev/null; then
        if [ -z "$DOCKER_HOST" ] && [ "$KUBERNETES_PORT" ]; then
          export DOCKER_HOST='tcp://localhost:2375'
        fi
      fi

      # Needed in order to 'docker manifest inspect'
      mkdir -p ~/.docker
      touch ~/.docker/config.json
      echo '{"experimental": "enabled"}' > ~/.docker/config.json

    - |
      echo "Logging into registry..."
      if [[ -n "$CI_REGISTRY" && -n "$CI_REGISTRY_USER" ]]; then
        echo "Logging in to GitLab Container Registry with CI credentials..."
        echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
      fi

      if [[ -n "${DOCKERFILE_PATH}" ]]; then
        echo "Building Dockerfile-based application using '${DOCKERFILE_PATH}'..."
      else
        export DOCKERFILE_PATH="Dockerfile"
      fi

      if [[ ! -f "${DOCKERFILE_PATH}" ]]; then
        echo "Unable to find '${DOCKERFILE_PATH}'. Exiting..." >&2
        exit 1
      fi

    - |
      echo "Attempting to pull a previously built image for use with --cache-from..."
      docker image pull --quiet "$image_previous" || \
        docker image pull --quiet "$image_latest" || \
        echo "No previously cached image found. The docker build will proceed without using a cached image"

    - |
      echo "Checking for an already built Docker image with this commit SHA..."
      docker manifest inspect $CI_APPLICATION_REPOSITORY:$CI_COMMIT_SHORT_SHA 2>&1 > /dev/null || inspect_failed=1
      UNIXTIME=$(date +%s)
      if [[ "${inspect_failed}" -gt 0 ]]; then
        echo "Git SHA image does not exist..."
        echo "Running Docker build ..."
        docker build \
          --cache-from "$image_previous" \
          --cache-from "$image_latest" \
          -f "${DOCKERFILE_PATH}" \
          $AUTO_DEVOPS_BUILD_IMAGE_EXTRA_ARGS \
          --tag $CI_APPLICATION_REPOSITORY:$CI_COMMIT_SHORT_SHA \
          --tag $CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG \
          --tag $CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG-$UNIXTIME \
          .
        docker push $CI_APPLICATION_REPOSITORY:$CI_COMMIT_SHORT_SHA
        if [[ ! "$CI_APPLICATION_TAG" == "$CI_COMMIT_SHORT_SHA" ]]; then
          echo "This is a tag, pushing..."
          docker push $CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG
          docker push $CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG-$UNIXTIME
        fi
        if [[ "$CI_COMMIT_BRANCH" == "master" ]]; then
          echo "Building on master, so adding Docker tag with timestmap"
          docker push $CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG-$UNIXTIME
        fi
      else
        echo "Git SHA image exists..."
        if [[ ! "$CI_APPLICATION_TAG" == "$CI_COMMIT_SHORT_SHA" ]]; then
          docker pull $CI_APPLICATION_REPOSITORY:$CI_COMMIT_SHORT_SHA
          echo "This is a tag, pushing..."
          docker tag $CI_APPLICATION_REPOSITORY:$CI_COMMIT_SHORT_SHA $CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG
          if [[ "$CI_COMMIT_BRANCH" == "master" ]] || [[ ! -z "$CI_COMMIT_TAG" ]]; then
            docker tag $CI_APPLICATION_REPOSITORY:$CI_COMMIT_SHORT_SHA $CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG-$UNIXTIME
            docker push $CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG-$UNIXTIME
          fi
          docker push $CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG
        else
          echo "Nothing to push to the registry, since this is not a tag..."
        fi
        if [[ "$CI_COMMIT_BRANCH" == "gitlab_ci" ]]; then
          echo "Building on gitlab_ci, so adding Docker tag with timestmap"
          docker pull $CI_APPLICATION_REPOSITORY:$CI_COMMIT_SHORT_SHA
          docker tag $CI_APPLICATION_REPOSITORY:$CI_COMMIT_SHORT_SHA $CI_APPLICATION_REPOSITORY:$CI_COMMIT_SHORT_SHA-$UNIXTIME
          docker push $CI_APPLICATION_REPOSITORY:$CI_COMMIT_SHORT_SHA-$UNIXTIME
        fi
      fi
  rules:
    - if: '$AUTO_DEVOPS_PLATFORM_TARGET == "EC2"'
      when: never
    - if: '$CI_COMMIT_TAG || $CI_MERGE_REQUEST_ID || $CI_COMMIT_BRANCH == "master"'
  allow_failure: true
build_artifact:
  stage: build
  script:
    - printf "To build your project, please create a build_artifact job into your .gitlab-ci.yml file.\nMore information at https://docs.gitlab.com/ee/ci/cloud_deployment\n"
    - exit 1
  rules:
    - if: '$AUTO_DEVOPS_PLATFORM_TARGET == "EC2"'

container_scanning:
  stage: test
  before_script:
    - export CI_APPLICATION_REPOSITORY=${CI_REGISTRY_IMAGE}
    - export CI_APPLICATION_TAG=${CI_COMMIT_SHORT_SHA}
  rules:
    - if: '$AUTO_DEVOPS_PLATFORM_TARGET == "EC2"'
      when: never
    - if: '$CI_COMMIT_TAG || $CI_MERGE_REQUEST_ID || $CI_COMMIT_BRANCH == "master"'

include:
  - template: Jobs/Build.gitlab-ci.yml
  - template: Security/Container-Scanning.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml

variables:
  DOCKERFILE_PATH: Dockerfile
